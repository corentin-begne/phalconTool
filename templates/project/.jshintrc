{
    // -----------------
    // --------------------------------------------------------------------
    // JSHint Configuration, Strict Edition
    // --------------------------------------------------------------------
    

    // == Enforcing Options ===============================================
    // When set to true, these options will make JSHint produce more
    // warnings about your code.
    "esversion": 6,
    "camelcase": true, // This option allows you to force all variable names to use either camelCase style or UPPER_CASE with underscores.
    "curly": true, // Require {} for every new block or scope
    "eqeqeq": true, // Require triple equals i.e. `===`
    "forin": true, // Tolerate `for in` loops without `hasOwnPrototype`
    "immed": true, // Require immediate invocations to be wrapped in parens e.g. `( function(){}() );
    "latedef": false, // Prohibit variable use before definition
    "newcap": true, // Require capitalization of all constructor functions e.g. `new F()`
    "noempty": true,  // Prohibit use of empty blocks.
    "nonew": false,  //  Prohibit use of constructors for side-effects. ` new MyConstructor(); `
    "plusplus": false,   // Prohibit use of `++` & `--`
    "quotmark": "double", // This option enforces the consistency of quotation marks used throughout your code
    "undef": true, // This option prohibits the use of explicitly undeclared variables
    "unused": true, // Require all non-global variables be declared before they are used
    "strict": false, // Require `use strict` pragma in every file
    "maxparams": 3, // This option lets you set the max number of formal parameters allowed per function
    "maxdepth": 3, // This option lets you control how nested do you want your blocks to be

    // == Relaxing Options ================================================
    //
    // These options allow you to suppress certain types of warnings. Use
    // them only if you are absolutely positive that you know what you are
    // doing.

    "asi": false, // Tolerate Automatic Semicolon Insertion (no semicolons)
    "-W032": true, // tolerate semicolon after function
    "boss": false, // Tolerate assignments inside if, for & while. Usually conditions & loops are for comparison, not assignments
    "debug": true, // Allow debugger statements e.g. browser breakpoints
    "eqnull": false, // Tolerate use of `== null`.
    "evil": false, // Tolerate use of `eval`.
    "expr": false,    // Tolerate `ExpressionStatement` as Programs.
    "funcscope": false,    // Tolerate declarations of variables inside of control structures while accessing them later from the outside.
    "globalstrict": false,    // Allow global "use strict" (also enables 'strict').
    "iterator": false,    // Allow usage of __iterator__ property.
    "lastsemic": false,    // Tolerat missing semicolons when the it is omitted for the last statement in a one-line block.
    "laxbreak": false,    // Tolerate unsafe line breaks e.g. `return [\n] x` without semicolons.
    "laxcomma": false,    // Suppress warnings about comma-first coding style.
    "loopfunc": false,    // Allow functions to be defined within loops.
    "multistr": false,    // Tolerate multi-line strings.
    "proto": false,    // Tolerate __proto__ property. This property is deprecated.
    "scripturl": false,    // This option suppresses warnings about the use of script-targeted URLs—such as javascript:....
    "shadow": false,    // Allows re-define variables later in code e.g. `var x=1; x=2;`.
    "sub": false,    // Tolerate all forms of subscript notation besides dot notation e.g. `dict['key']` instead of `dict.key`.
    "supernew": false,    // Tolerate `new function () { ... };` and `new Object;`.
    "validthis": true,    // Tolerate strict violations when the code is running in strict mode and you use this in a non-constructor function
    "onecase": false,    // Tolerate switches with just one case.
    "smarttabs": true,    // Tolerate mixed tabs and spaces when the latter are used for alignmnent only.
    
    // == Environments ====================================================
    //
    // These options pre-define global variables that are exposed by
    // popular JavaScript libraries and runtime environments—such as
    // browser or node.js.  

    "browser": true, // This option defines globals exposed by modern browsers (document, navigator, FileReader...)
    "devel": true, // This option defines globals that are usually used for logging poor-man's debugging (console, alert)
    "jquery": true, // This option defines globals exposed by the jQuery JavaScript library.
    "node": true, // This option defines globals available when your code is running inside of the Node runtime environment.
    "worker": true, // This option defines globals available when your code is running inside of a Web Worker.
    "globals": {
        "rootRequire": true
    }
}
